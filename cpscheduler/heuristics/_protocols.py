from typing import Protocol, runtime_checkable, Any, TypeVar
from collections.abc import Iterable, Iterator

@runtime_checkable
class ArrayLike(Protocol):
    def __getitem__(self, index: Any, /) -> Any: ...
    def __len__(self, /) -> int: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def dtype(self) -> Any: ...
    def astype(self, dtype: Any) -> Any: ...
    def __array__(self) -> Any: ...
    def __sub__(self, other: Any, /) -> 'ArrayLike': ...
    def __add__(self, other: Any, /) -> 'ArrayLike': ...
    def __neg__(self, /) -> 'ArrayLike': ...
    def __mul__(self, other: Any, /) -> 'ArrayLike': ...
    def __truediv__(self, other: Any, /) -> 'ArrayLike': ...
    def argsort(self, *args: Any, **kwargs: Any) -> 'ArrayLike': ...
    def __iter__(self) -> Iterator[Any]: ...

_T_co = TypeVar('_T_co', bound=Any, covariant=True)
class TabularRepresentation(Protocol[_T_co]):
    def __getitem__(self, index: Any, /) -> _T_co: ...
