from typing import Protocol, runtime_checkable, Any, TypeVar
from collections.abc import Iterator


@runtime_checkable
class ArrayLike(Protocol):
    def __getitem__(self, index: Any, /) -> Any: ...
    def __setitem__(self, index: Any, value: Any, /) -> None: ...
    def __len__(self, /) -> int: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def dtype(self) -> Any: ...
    def __array__(self) -> Any: ...
    def __add__(self, other: Any, /) -> "ArrayLike": ...
    def __radd__(self, other: Any, /) -> "ArrayLike": ...
    def __sub__(self, other: Any, /) -> "ArrayLike": ...
    def __rsub__(self, other: Any, /) -> "ArrayLike": ...
    def __neg__(self, /) -> "ArrayLike": ...
    def __mul__(self, other: Any, /) -> "ArrayLike": ...
    def __rmul__(self, other: Any, /) -> "ArrayLike": ...
    def __truediv__(self, other: Any, /) -> "ArrayLike": ...
    def __rtruediv__(self, other: Any, /) -> "ArrayLike": ...
    def argsort(self, *args: Any, **kwargs: Any) -> "ArrayLike": ...
    def __iter__(self) -> Iterator[Any]: ...
    def sum(self) -> Any: ...
    def max(self) -> Any: ...
    def min(self) -> Any: ...
    def mean(self) -> Any: ...
    def __eq__(self, value: Any, /) -> "ArrayLike": ...  # type: ignore[override]
    def __ne__(self, value: Any, /) -> "ArrayLike": ...  # type: ignore[override]
    def __lt__(self, value: Any, /) -> "ArrayLike": ...
    def __le__(self, value: Any, /) -> "ArrayLike": ...
    def __gt__(self, value: Any, /) -> "ArrayLike": ...
    def __ge__(self, value: Any, /) -> "ArrayLike": ...


_T = TypeVar("_T", bound=Any)


class TabularRepresentation(Protocol[_T]):
    def __getitem__(self, index: Any, /) -> _T: ...
    def __setitem__(self, index: Any, value: _T, /) -> None: ...
