from typing import Any, Protocol, TypeVar, runtime_checkable
from collections.abc import Iterator


from cpscheduler.environment.data import SchedulingData
from cpscheduler.environment.tasks import Tasks


_T_co = TypeVar("_T_co", covariant=True)


# By definition, every Objective is a Metric
class Metric(Protocol[_T_co]):
    """
    A protocol for metrics that can be used to track and report metrics
    during the scheduling process.
    """

    def __call__(
        self, time: int, tasks: Tasks, data: SchedulingData, objective: float
    ) -> _T_co: ...


@runtime_checkable
class ImportableMetric(Metric[_T_co], Protocol):
    def import_data(self, data: SchedulingData) -> None:
        """
        Import data from the SchedulingData object.
        This method is used to initialize the metric with the necessary data.
        """
        pass


@runtime_checkable
class ArrayLike(Protocol):
    def __getitem__(self, index: Any, /) -> Any: ...
    def __setitem__(self, index: Any, value: Any, /) -> None: ...
    def __len__(self, /) -> int: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def dtype(self) -> Any: ...
    def __array__(self) -> Any: ...
    def __add__(self, other: Any, /) -> "ArrayLike": ...
    def __radd__(self, other: Any, /) -> "ArrayLike": ...
    def __sub__(self, other: Any, /) -> "ArrayLike": ...
    def __rsub__(self, other: Any, /) -> "ArrayLike": ...
    def __neg__(self, /) -> "ArrayLike": ...
    def __mul__(self, other: Any, /) -> "ArrayLike": ...
    def __rmul__(self, other: Any, /) -> "ArrayLike": ...
    def __truediv__(self, other: Any, /) -> "ArrayLike": ...
    def __rtruediv__(self, other: Any, /) -> "ArrayLike": ...
    def __iter__(self) -> Iterator[Any]: ...
    def __eq__(self, value: Any, /) -> "ArrayLike": ...  # type: ignore[override]
    def __ne__(self, value: Any, /) -> "ArrayLike": ...  # type: ignore[override]
    def __lt__(self, value: Any, /) -> "ArrayLike": ...
    def __le__(self, value: Any, /) -> "ArrayLike": ...
    def __gt__(self, value: Any, /) -> "ArrayLike": ...
    def __ge__(self, value: Any, /) -> "ArrayLike": ...


_T = TypeVar("_T", bound=Any)


class TabularRepresentation(Protocol[_T]):
    def __getitem__(self, index: Any, /) -> _T: ...
    def __setitem__(self, index: Any, value: _T, /) -> None: ...
